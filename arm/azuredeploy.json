{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"location": {
			"type": "string"
		},
		"vmssName": {
			"type": "string"
		},
		"vmSku": {
			"type": "string"
		},
		"adminUsername": {
			"type": "string"
		},
		"instanceCount": {
			"type": "string"
		},
		"existingManagedImageResourceGroup": {
			"type": "string",
			"metadata": {
				"description": "The name of the Resource Group containing the Image that instances of the VM Scale Set will be created from. Images can be created by capturing Azure VMs."
			}
		},
		"existingManagedImageName": {
			"type": "string",
			"metadata": {
				"description": "The name of the Image that instances of the VM Scale Set will be created from. Images can be created by capturing Azure VMs."
			}
		},
		"singlePlacementGroup": {
			"type": "string",
			"defaultValue": true
		},
		"pipName": {
			"type": "string"
		},
		"pipLabel": {
			"type": "string"
		},
		"skuType": {
			"type": "string",
			"defaultValue": "Standard"			
		},
		"ipAllocationMethod": {
			"type": "string",
			"defaultValue": "Static"
		},
		"priority": {
			"type": "string",
			"defaultValue": "Regular"			
		},
		"adminPassword": {
			"type": "securestring"
		}
	},
	"variables": {
		"vnetName": "[concat(parameters('vmssName'), 'Vnet')]",
		"namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
		"networkApiVersion": "2018-01-01",
		"storageApiVersion": "2017-10-01",
		"computeApiVersion": "2017-12-01",
		"autoscaleApiVersion": "2015-04-01",
		"loadBalancerName": "[concat(parameters('vmssName'), 'lb')]",
		"loadBalancerId": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
		"networkSecurityGroupName": "[concat(parameters('vmssName'), 'nsg')]",
		"managedImageId": "[resourceId(parameters('existingManagedImageResourceGroup'), 'Microsoft.Compute/images', parameters('existingManagedImageName'))]"
	},
	"resources": [{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('pipName')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"sku": {
				"name": "[parameters('skuType')]"
			},
			"properties": {
				"publicIPAllocationMethod": "[parameters('ipAllocationMethod')]",
				"dnsSettings": {
					"domainNameLabel": "[parameters('pipLabel')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('loadBalancerName')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('pipName'))]"
			],
			"sku": {
				"name": "[parameters('skuType')]"
			},
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('pipName'))]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "bepool"
				}],
				"inboundNatPools": [{
					"name": "natpool",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[concat(variables('loadBalancerId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]"
						},
						"protocol": "tcp",
						"frontendPortRangeStart": "50000",
						"frontendPortRangeEnd": "50119",
						"backendPort": "22"
					}
				}],
				"probes": [{
					"name": "tcpProbe",
					"properties": {
						"protocol": "tcp",
						"port": 80,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}],
				"loadBalancingRules": [{
					"name": "LBRule",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[concat(variables('loadBalancerId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]"
						},
						"backendAddressPool": {
							"id": "[concat(variables('loadBalancerId'),'/backendAddressPools/bepool')]"
						},
						"protocol": "tcp",
						"frontendPort": 80,
						"backendPort": 80,
						"enableFloatingIP": false,
						"idleTimeoutInMinutes": 5,
						"probe": {
							"id": "[concat(variables('loadBalancerId'),'/probes/tcpProbe')]"
						}
					}
				}]
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "[variables('networkApiVersion')]",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [{
						"name": "allowSSH",
						"properties": {
							"description": "Allow SSH traffic",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1000,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTP",
						"properties": {
							"description": "Allow web traffic",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 1001,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('vnetName')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('networkApiVersion')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"10.0.0.0/16"
					]
				},
				"subnets": [{
					"name": "default",
					"properties": {
						"addressPrefix": "10.0.0.0/21",
						"networkSecurityGroup": {
							"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
						}
					}
				}]
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
			]
		},
		{
			"name": "[parameters('vmssName')]",
			"type": "Microsoft.Compute/virtualMachineScaleSets",
			"apiVersion": "[variables('computeApiVersion')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
			],
			"sku": {
				"name": "[parameters('vmSku')]",
				"tier": "Standard",
				"capacity": "[int(parameters('instanceCount'))]"
			},
			"properties": {
				"overprovision": true,
				"upgradePolicy": {
					"mode": "Rolling"
				},
				"singlePlacementGroup": "[parameters('singlePlacementGroup')]",
				"virtualMachineProfile": {
					"storageProfile": {
						"imageReference": {
							"id": "[variables('managedImageId')]"
						},
						"osDisk": {
							"createOption": "FromImage",
							"caching": "ReadWrite"
						}
					},
					"priority": "[parameters('priority')]",
					"osProfile": {
						"computerNamePrefix": "[variables('namingInfix')]",
						"adminUsername": "[parameters('adminUsername')]",
						"adminPassword": "[parameters('adminPassword')]"
					},
					"networkProfile": {
						"healthProbe": {
							"id": "[concat(variables('loadBalancerId'),'/probes/tcpProbe')]"
						},
						"networkInterfaceConfigurations": [{
							"name": "[concat(parameters('vmssName'), 'Nic')]",
							"properties": {
								"primary": true,
								"enableAcceleratedNetworking": true,
								"ipConfigurations": [{
									"name": "[concat(parameters('vmssName'), 'IpConfig')]",
									"properties": {
										"subnet": {
											"id": "[reference(variables('vnetName'), variables('networkApiVersion')).subnets[0].id]"
										},
										"loadBalancerBackendAddressPools": [{
											"id": "[reference(variables('loadBalancerName'), variables('networkApiVersion')).backendAddressPools[0].id]"
										}],
										"loadBalancerInboundNatPools": [{
											"id": "[reference(variables('loadBalancerName'), variables('networkApiVersion')).inboundNatPools[0].id]"
										}]
									}
								}]
							}
						}]
					},
					"extensionProfile": {
                        "extensions": [
                            {
                                "properties": {
                                    "publisher": "Microsoft.Compute",
                                    "type": "VMAccessAgent",
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "UserName": "azureadmin"
                                    }
                                },
                                "name": "VMAccessAgent"
                            }
						]
					}
				}
			}
		}
	]
}